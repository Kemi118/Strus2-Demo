
	----错误消息重用 示例-----
	
age=age
count=count
submit=submit
int.error=${getText(fieldName)} needs to be between ${min} and ${max}

在错误消息中访问 fielName 并将其作为参数访问 其对应的 国际化资源 


	-----自定义验证器------
> 自定义验证器必须实现 Validator 接口.
	ValidatorSupport 和 FieldValidatorSupport 实现了 Validator 接口
	*若需要普通的验证程序, 可以继承 ValidatorSupport 类
	*若需要字段验证程序, 可以继承 FieldValidatorSupport 类
	*若验证程序需要接受一个输入参数, 需要为这个参数增加一个相应的属性
	
>注册验证程序: 
	->自定义验证器需要在类路径里的某个 validators.xml 文件里注册
		验证框架首先在  根目录  下找validators.xml文件,没找到validators.xml文件, 验证框架将
		调用默认的验证设置,即default.xml里面的配置信息.
		
>步骤
	1. 自定义验证器类继承 ValidatorSupport 或  FieldValidatorSupport

		实现 FieldValidatorSupport 在  validate 方法中：
			//1.获取 字段名 和 值
			String fielName = getFieldName();
			Object value = this.getFieldValue(fielName, object);
			//2.验证
			IDCard card = new IDCard();
			boolean isValidate = card.Verify((String)value);
			//3.如果验证不通过则添加错误消息
			if(!isValidate){
				addFieldError(fielName , object);
			}
			
	2. 在根目录下建立 validators.xml文件 注册 自定义的验证器类
		<validator name="idcard" class="com.luodexin.struts2.testIDCard.IDCardValidator"></validator>

	3. 使用自定义的验证器
		在 AciontName-validation.xml 或     AciontName-aliasName-validation.xml中配置实用自定义验证器
		
		
